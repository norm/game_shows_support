Game Shows support
==================

Support scripts and files that I use when creating content for my
[Game Shows][gs] YouTube channel.

[gs]: https://www.youtube.com/channel/UCI0KNfM-b2vXKPY4QwJ0_oQ


## Running commands

The [generate](generate) script is used to run scripts, and takes care
of providing the right environment variables, including setting up `$PATH`
to find the companion scripts kept in [bin/](bin).


## Before capturing

Some games are very linear in their story telling (eg. Assassin's Creed II)
and some are open-world and will let you experience things in (mostly) any
order (eg. Horizon Zero Dawn).

The `story` script takes a collection of narrative threads and how they
interplay and helps to resolve the ordering. Each thread gets its own file,
describing what to do and its relationship to other threads, and the script
gives you a list of actions to take.

The format is described more in [story resolution][story-resolution.markdown].

    # create story threads
    ./generate add_story_thread side-quest Thirst for the Hunt

    # show the actions to take when capturing footage
    # (also generates story.txt and story.csv)
    ./generate story [--no-errors]

    # only show the main storyline, or the thread structure without the text
    ./generate story --main [--no-errors]
    ./generate story --outline [--no-errors]

    # when something isn't connecting right, get a bunch of extra info
    ./generate story --debug

    # test the story graph (exits 1 for a thread error, 2 for a story loop)
    ./generate story --test

    # show just the graph/edges (or both)
    ./generate story [--graph] [--edges]

    # skip completed nodes
    ./generate story --skip [--no-errors]

## Preparing footage

The raw footage is captured using an Elgato 4K60 S+ in `mkv` format.

    # copy footage from SD card
    ./generate raw

Playback the raw footage, and convert it for use. The Elgato captures two
audio tracks, one for the mic input (for "chat", which I don't do) which
is stripped.

A raw file can either be converted as whole or in part ("slices"), skipped for
now, or removed if not needed. A text file is created for each new file to
keep notes of what footage is where, and a Things task to track if I've filled
it out.

    # prep the footage used in editing from the raw video
    ./generate footage


## Generating audio from text

In order to make large swathes of text appearing on screen more accessible
and palatable, it is provided as audio narration too. This is generated
using Amazon Polly.

    # make mp3s from new or updated text files
    ./generate audio


## Generating draft captions

In order to provide captions for videos, drafts can be generated with Amazon
Transcribe. I find it more accurate than the YouTube autogenerated captions,
and has the advantage of providing timing and alternatives per individual
word.

    # make captions from new or updated rendered videos
    ./generate captions


## Creating thumbnail videos

First, create a video `_thumbnails.mp4` which uses a 1-second freeze frame
from each chapter of the show, with the logo and names overlaid in the regular
pattern. This video is then used to produce the `.jpg` files used as thumbnails
on YouTube.

    # make thumbnails for all videos currently rendered
    ./generate thumbnails


## Editing/reviewing annotations

Annotations can be easily edited/reviewed later using the
[`annotations`](bin/annotations) script. It works from most-recent to
least-recent, and can match only empty files or ones matching a specific
pattern (typically the date).

    # edit only empty files
    ./generate annotations empty

    # edit only a specific day
    ./generate annotations 2020-11-20


## Keeping track with [Things][th]

The scripts [`add_to_things`](bin/add_to_things), 
[`chapter_tasks`](bin/chapter_tasks),
and [`route_tasks`](bin/route_tasks)
help me keep track of where I am in any given video chapter in 
[Cultured Code's Things][th].

I use "Route: " tasks when planning out the route to take through the game,
then organise them roughly into chapters, and each chapter has a
[number of tasks](Horizon%20Zero%20Dawn/things.tasks)
such as "capture footage",
"add map", "retime captions", etc.

    # add a task to Things
    ./generate add_to_things "I am an example task"

    # add all of the tasks required for Chapter 33 of the current "show"
    ./generate chapter_tasks 33

![Example chapter in Things](chapter.png)

[th]: http://culturedcode.com/things/


## Describing the chapters

Chapter (meaning an episode of a show) descriptions and chapter (meaning a
subsection of a single video file) timings are stored in matching `.txt`
files, with a structure like so:

    In Chapter 1 we are introduced to the world, the Nora tribe, and Rost
    teaches a young child how to hunt the machines.

    0:00 Naming ceremony
    5:54 She's an outcast, to be shunned
    7:58 A Gift from the Past
    28:58 Lessons of the Wild
    47:30 We'd best get started then
    52:13 End screen

This will serve as both a copy-and-pastable description for YouTube, and
create video chapter markers when the rendered chapter videos are imported to
iTunes.

    # create and copy files for iTunes (so I can watch them on my Apple TV)
    ./generate itunes
