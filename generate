#!/usr/bin/env -S bash -euo pipefail

DEFAULT_SHOW='Red Dead Redemption II'
show="$DEFAULT_SHOW"

function usage {
    sed -e 's/^        //' <<EOF
        Usage:

            ./generate [-n] [show] <command> [args]

                Runs <command> for the named [show], or the default show
                "$DEFAULT_SHOW" as configured in the generate script.

                -n  Perform a dry-run, only list what would be done.

            ./generate [command] help

                Show help text for the given command, or this script.

EOF
    exit 0
}

function _pushd { pushd "$1" >/dev/null; }
function _popd  { popd       >/dev/null; }

function backup_ssd {
    local dryrun=-n
    [ -n "${DRY_RUN:-}" ] && dryrun='-n'

    rsync \
        $dryrun \
        --archive \
        --hard-links \
        --exclude .git \
        --exclude .DS_Store \
        --exclude __pycache__ \
        --exclude raw \
        --info=name,progress \
            "$FAST_VIDEO_DIR/Game Shows/." \
            "$WORKING_DIR/Game Shows/."
}

function backup_working_files {
    local dryrun=''    
    [ -n "${DRY_RUN:-}" ] && dryrun='-n'

    status "== {cyan}backup DaVinci Resolve files"
    if [ -n "${DRY_RUN:-}" ]; then
        rsnapshot -c rsnapshot.conf -t regular
        echo ''
    else
        rsnapshot -c rsnapshot.conf -v regular
        echo ''
    fi

    status "== {cyan}backup to vault"
    rsync \
        $dryrun \
        --archive \
        --hard-links \
        --info=name,progress \
        --exclude __pycache__ \
        --exclude raw \
        --exclude cache \
        --exclude resolve \
        --exclude ps5 \
        "$WORKING_DIR/." \
        "$BACKUP_BASE/."
}

function backup_to_s3 {
    local quick="${1:-}"
    local dryrun=''

    [ -n "${DRY_RUN:-}" ] && dryrun='--dryrun'
    ssh vault backup_videos $dryrun $quick
}

function backup_to_s3 {
    local quick="${1:-}"
    local dryrun=''
    local -a excludes

    _pushd "$BACKUP_DIR"

    [ -n "${DRY_RUN:-}" ] && dryrun='--dryrun'
    [ -n "$quick" ] && {
        excludes+=(--exclude '*/footage/*.mp4')
        excludes+=(--exclude '*/*.mp4')
    }

    for file in */in_draft; do
        [ "$file" = "*/in_draft" ] && break
        excludes+=(--exclude "$(dirname "$file")/*")
    done

    aws s3 sync \
        $dryrun \
        --exclude \*/cache\* \
        --exclude \*/support\* \
        --exclude \*/raw/\* \
        --exclude \*/\*.m4v \
        --exclude .git\* \
        "${excludes[@]}" \
            . \
            "s3://$S3_BUCKET"

    [ -n "$quick" ] && status -l "== {magenta}full s3 backup should be performed"
    _popd
}

case "${1:-}" in
    help) 
        usage
        ;;
    -n|--dry-run)
        export DRY_RUN=1
        shift
        ;;
esac

if [ "${2:-}" = 'help' ]; then
    cat bin/$1 \
        | awk '
            /env.*bash/{show=1; next}
            /^[^#]/{show=0}
            show
          ' \
        | sed -e '1d' -e '$d' -e 's/^#//' -e 's/^ //'
    exit 0
fi

if [ -d "${1:-}" ]; then
    show="$1"
    shift
fi

export BACKUP_BASE='vault:/vault/video'
export BACKUP_DIR="$BACKUP_BASE/Game Shows"
export CAPTURE_DIR="/Volumes/elgato/Elgato"
export GAME_SHOW_NAME="$show"
export S3_BUCKET=gameshows.m17s.net
export S3_BUCKET_DIR="Game Shows/$show"
export THINGS_PROJECT=$(cat "$show/things.id")
export GAME_ID=$(cat "$show/game.id")
export TV_HOST='southpaw'
export TV_LOCATION="/files/tv/$(echo "$show" | sed -e 's/ /\\ /g')/Season\ 1"
export WORKING_DIR='/Volumes/vinge/video'
export FAST_VIDEO_DIR='/Volumes/vincent'

export PATH="$PWD/bin:$PATH"

case "${1:-all}" in
    backup)
        case "${2:-}" in
            vault)      backup_to_s3 ;;
            vincent)    backup_ssd ;;
            vinge)      backup_working_files ;;
            *)
                status -l "== {bold}{yellow}backup vincent"
                backup_ssd
                status -l "== {bold}{yellow}backup vinge"
                backup_working_files
                status -l "== {bold}{yellow}backup vault"
                backup_to_s3 quick
                ;;
        esac
        ;;

    full_backup)
        status -l "== {bold}{yellow}backup vincent"
        backup_ssd
        status -l "== {bold}{yellow}backup vinge"
        backup_working_files
        status -l "== {bold}{yellow}backup vault"
        backup_to_s3
        ;;

    story)
        _pushd "$show" >/dev/null
        shift
        if [ "$#" -gt 0 ]; then
            resolve_story "$@"
        else
            resolve_story --test \
                && resolve_story --main > story-main.txt \
                && resolve_story --csv | tee story.txt
        fi
        _popd
        ;;

    all)
        pushd "$show" >/dev/null
        status -l "== {bold}{yellow}raw"
        raw
        status -l "== {bold}{yellow}footage"
        footage
        status -l "== {bold}{yellow}annotations"
        annotations empty
        status -l "== {bold}{yellow}audio"
        audio
        status -l "== {bold}{yellow}captions"
        captions
        status -l "== {bold}{yellow}thumbnails"
        thumbnails
        status -l "== {bold}{yellow}itunes"
        itunes
        popd >/dev/null

        status -l "== {bold}{yellow}backup vincent"
        backup_ssd
        status -l "== {bold}{yellow}backup vinge"
        backup_working_files
        status -l "== {bold}{yellow}backup vault"
        backup_to_s3 quick

        pushd "$show" >/dev/null
        status -l "== {bold}{yellow}clean"
        clean
        popd >/dev/null
        ;;

    *)
        pushd "$show" >/dev/null
        "$@"
        ;;
esac

if [ -z "${DRY_RUN:-}" ]; then
    echo ''
    git status -bs
fi
