#!/usr/bin/env bash -euo pipefail

DEFAULT_SHOW='Ezio Collection'
show="$DEFAULT_SHOW"

function usage {
    sed -e 's/^        //' <<EOF
        Usage:

            ./generate [-n] [show] <command> [args]

                Runs <command> for the named [show], or the default show
                "$DEFAULT_SHOW" as configured in the generate script.

                -n  Perform a dry-run, only list what would be done.

            ./generate [command] help

                Show help text for the given command, or this script.

EOF
    exit 0
}

function _pushd { pushd "$1" >/dev/null; }
function _popd  { popd       >/dev/null; }

function backup_to_local_disk {
    find . -name .DS_Store -exec rm {} \;

    dryrun=''
    [ -n "${DRY_RUN:-}" ] && dryrun='-n'

    rsync $dryrun -avP --inplace \
        --exclude "*/cache" \
        --exclude "*/support" \
        --exclude "*/*.m4v" \
        . \
        "$BACKUP_DIR/."

    # highlight any differences between the backup dir and the main dir
    # (shows files that can be deleted from the backup, for example)
    backup_status=$(mktemp)
    _pushd "$BACKUP_DIR"
    git status -bs > $backup_status
    _popd

    colordiff -u <(git status -bs) $backup_status \
        || true
}

function backup_to_s3 {
    _pushd "$BACKUP_DIR"

    dryrun=''
    [ -n "${DRY_RUN:-}" ] && dryrun='--dryrun'

    aws s3 sync \
        $dryrun \
        --exclude \*/cache\* \
        --exclude \*/support\* \
        --exclude \*/raw/\* \
        --exclude \*/\*.m4v \
        --exclude .git\* \
            . \
            "s3://$S3_BUCKET"

    _popd
}

case "${1:-}" in
    help) 
        usage
        ;;
    -n|--dry-run)
        export DRY_RUN=1
        shift
        ;;
esac

if [ "${2:-}" = 'help' ]; then
    cat bin/$1 \
        | awk '
            /env.bash/{show=1; next}
            /^[^#]/{show=0}
            show
          ' \
        | sed -e '1d' -e '$d' -e 's/^#//' -e 's/^ //'
    exit 0
fi

if [ -d "${1:-}" ]; then
    show="$1"
    shift
fi

export BACKUP_DIR='/Volumes/verne/video/Game Shows'
export CAPTURE_DIR='Movies'
export CAPTURE_HOST='portsider'
export GAME_SHOW_NAME="$show"
export S3_BUCKET=gameshows.m17s.net
export S3_BUCKET_DIR="Game Shows/$show"
export THINGS_PROJECT=$(cat "$show/things.id")
export GAME_ID=$(cat "$show/game.id")
export TV_HOST='southpaw'
export TV_LOCATION="/files/tv/$(echo "$show" | sed -e 's/ /\\ /g')/Season\ 1"

export PATH="$PWD/bin:$PATH"

case "${1:-all}" in
    backup)
        backup_to_local_disk
        backup_to_s3
        ;;

    local_backup)
        backup_to_local_disk
        ;;

    s3_backup)
        backup_to_s3
        ;;

    all)
        pushd "$show" >/dev/null
        status "== {bold}{yellow}raw"
        raw
        status -l "== {bold}{yellow}footage"
        footage
        status -l "== {bold}{yellow}annotations"
        annotations empty
        status -l "== {bold}{yellow}audio"
        audio
        status -l "== {bold}{yellow}captions"
        captions
        status -l "== {bold}{yellow}thumbnails"
        thumbnails
        status -l "== {bold}{yellow}itunes"
        itunes
        popd >/dev/null

        status -l "== {bold}{yellow}local_backup"
        backup_to_local_disk
        status -l "== {bold}{yellow}s3_backup"
        backup_to_s3

        pushd "$show" >/dev/null
        status -l "== {bold}{yellow}clean"
        clean
        popd >/dev/null
        ;;

    *)
        pushd "$show" >/dev/null
        "$@"
        ;;
esac

if [ -z "${DRY_RUN:-}" ]; then
    echo ''
    git status -bs
fi
